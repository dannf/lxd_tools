#!/usr/bin/python2
import sys
import os
import json
import time
import subprocess

def date():
    return subprocess.check_output("date -u +%s.%N".split()).strip()

pylxd_path = os.path.join(os.getcwd(), 'pylxd/pylxd')
sys.path.insert(0, pylxd_path)
import client

name = sys.argv[1]
bridge = "br-%s" % name
rootfs = os.path.join('/var/lib/lxd/lxc', name, 'rootfs')
c = client.Client()


console_log = os.path.join('/var/lib/lxd/lxc', name, 'console.log')
config = {
   'name': name,
   'architecture': 'x86_64',
   'ephemeral': True,
   'hostname': name,
   'profiles': ['default'],
   'config': {
        'raw.lxc': 'lxc.console.logfile=%s\nlxc.network.link=%s\n' % (console_log, bridge),
   },
   'source': {
        'type': 'none',
        'path': rootfs,
   }
}

print('%s: %s container_init() ->' %(date(), name))
try:
    (resp, data) = c.container_init(config)
except Exception as e:
    print(('Failed to create profile: %s') % data.get('metadata'))
    msg = ('Cannot create container: {0}')
    raise Exception(msg.format(e), instance_id=name)

if resp not in [200, 202]:
    print 'Failed to init container!'
    sys.exit(1)

if resp == 202 and data['status_code'] != 100:
    print 'Failed to init container!'
    sys.exit(1)

print('%s: %s container_init() <-' %(date(), name))
print('%s: %s c.start() ->' %(date(), name))
c.start(name)
for _ in range(0, 10):
    if c.running(name) == True:
        print('%s: %s state=running' %(date(), name))
        sys.exit(0)
    print('%s: %s not running, calling c.start() ->' %(date(), name))
    c.start(name)
    time.sleep(0.25)

print 'Failed to start container: %s' % name
sys.exit(1)
